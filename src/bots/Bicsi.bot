#ifndef BOT_BICSI_H
#define BOT_BICSI_H

#include "bot.h"
#include <algorithm>

class Bot_Bicsi : public Bot {
private:
	std::vector<Minigame> gamesOrderNV = {Totals, Queens, Diamonds, Whist, Acool, KingOfHearts, TenClub};
	
	std::vector<Minigame> minusGames = {Totals, Queens, Diamonds, Acool, KingOfHearts};
	std::vector<Minigame> plusGames = {Whist, TenClub};
	
	bool flagTenClub, flagKingHearts, flagDiamonds, flagQueens;
	bool NVModeChosen;

	static bool compare(const Card &a, const Card &b) {
		return a.getValue() < b.getValue();
	}

public:
	Bot_Bicsi() {
	  	setName("BicsiBot9000 v0.1");
	}

	void onRoundStart() {
		Minigame game = getCurrentGame();

		flagQueens = (game == Minigame::Queens || game == Minigame::Totals);
		flagKingHearts = (game == Minigame::KingOfHearts || game == Minigame::Totals);
		flagTenClub = (game == Minigame::TenClub);
		flagDiamonds = (game == Minigame::Diamonds || game == Minigame::Totals);

	}

	Card onPlayCard() {
		Minigame curGame = getCurrentGame();
		if(find(minusGames.begin(), minusGames.end(), curGame) != minusGames.end())
			return playToLose();
		else
			return playToWin();
	}

	std::vector<Card> getPlayOptions() {
		auto stack = getCardsOnTable();
		auto hand = getHand();

		if(stack.empty()) return hand;
		else {
			std::vector<Card> ret;
			for(auto c : hand) {
				if(c.isSameSuite(stack[0]))
					ret.push_back(c);
			}

			if(ret.empty()) return hand;
			return ret;
		}
	}


	Card playToWin() {
		auto stack = getCardsOnTable();
		auto options = getPlayOptions();

		std::sort(options.begin(), options.end(), compare);
		assert(!options.empty());

		if(!stack.empty() && options[0].isSameSuite(stack[0])) {
			//Try to win
			return options.back();
		} else {
			//Throw the smallest one
			return options[0];
		}
	}

	Card playToLose() {
		auto stack = getCardsOnTable();
		auto options = getPlayOptions();

		sort(options.begin(), options.end(), compare);
		assert(!options.empty());

		if(!stack.empty() && options[0].isSameSuite(stack[0])) {
			//Try to lose

			int max_val = 0;
			for(auto c : stack) {
				if(c.isSameSuite(stack[0]))
					max_val = std::max(max_val, c.getValue());
			}

			for(auto it = options.rbegin(); it != options.rend(); ++it) {
				if(it->getValue() < max_val)
					return *it; 
			}
			return options[0];

		} else {
			if(!stack.empty()) {
				//If playing king
				if(flagKingHearts) {
					auto it = find(options.begin(), options.end(), Card(13, 'H'));
					if(it != options.end())
						return *it;
				}

				//If playing queens
				if(flagQueens) {
					for(auto x : options) {
						if(x.getValue() == 12)
							return x;
					}
				}

				//If playing diamonds
				if(flagDiamonds) {
					for(auto it = options.rbegin(); it != options.rend(); ++it)
						if(it->getSuite() == 'D')
							return *it;
				}


				//Throw the largest one
				return options.back();
			}

			return options[0];
		}
	}

	Minigame onChooseMinigame() {
		auto games = getAvailableGames();
		return games[rand() % games.size()];
	}

	bool onAskIfNV() {
		return true;
	}
};

#endif //BOT_BICSI_H

